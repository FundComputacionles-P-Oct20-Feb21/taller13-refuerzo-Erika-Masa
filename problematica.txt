// Problema
Dado un número positivo, genere una miniespecificación que permita descomponer el número dado en unidades, decenas, centenas, etc. Ejemplo: si el número es 1920 el resultado deberá ser similar a:

0 (0 unidades) 20 (2 unidades) 900 (9 centenas) 1000 (una unidad de millar)

Tomar en consideración lo siguiente:

Se ingresa el número en una variale k
Se guarda el número k en una variable temporal k1
Se empieza un ciclo repetitivo mientras k1 sea mayor a cero
Se calcula el residuo a través de: k1 MOD 10
Se presenta en pantalla lo siguiente en cada iteración: residuo * 10 elevado a la potencia j
j es un contador que debe empezar inicializado en cero antes del iniciar el ciclo funcionará el exponente de posicionamiento de la descomposición
k1 toma un nuevo valor, realizado una división mediante la operación: k1/10 (dara el resultado entero de la división)
Se incrementa el valor de j en uno.
Cuando se ejecuta una prueba de escritorio manual se debera obtener la siguiente salida: tomando como ejemplo 1920

0 * 10 elevado a la potencia  0
2 * 10 elevado a la potencia  1
9 * 10 elevado a la potencia  2
1 * 10 elevado a la potencia  3
Finalmente de usar de manera obligatoria dos funciones a parte de la función principal. Ejemplo, se puede crear un función que calcule el residulo para MOD 10.

Usar el archivo denominado problematica.txt
Subir una imagen o archivo de la ejecución de la prueba de escritorio de la problemática. //






1. Inicio
2. funcion principal()
3.	mensaje, X(20) [{ A-Z}, {a-z}, {0-9}, {BS}]
4. 	opcion, i[0,n]
5.	mensaje <-- descomponer()
6.	Escribir mensaje 	
7. Fin funcion principal()
8.
9. funcion descomponer (); String
10 	K, d[0-n]
11.	k1, d[0-n] <-- 0
12.	j, i[0-n] <-- 0
13.	cadenF, X(20) [{ A-Z}, {a-z}, {0-9}, {BS}]
14.	residuo, i[0-n]
15.	Escribir "Ingresar el valor a descomponer"
16.	Leer k
17. 	k1 <-- k
18.	Mientras (k1 > 0) entonces 
19.		residuo <-- obtenerResiduo(k1)
20.		cadenaF <-- cadenaF +residuo + "* 10 elevado a la potencia " + j
21.		k1 <-- k1/10
22.		j = j + 1 
23. Fin Mientras
24. return cadenaF
25. fin funcion descomponer()
26.
27. funcion obtenerResiduo(x, i); i
28.	z, i[0-n]
29. 	z <-- x MOD 10
30.	return z
31. Fin funcion obtenerResiduo() 
32.
33. Fin


 






